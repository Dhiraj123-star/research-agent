name: CI/CD Pipeline - Multi-Agent AI System

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_HUB_USERNAME: dhiraj918106
  IMAGE_NAME: multi-agent-ai
  REGISTRY: docker.io

jobs:
  # =============================================================================
  # TESTING JOB
  # =============================================================================
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov
        
    - name: Run linting
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Test imports (without API key)
      run: |
        python -c "import models; print('✅ models.py imports successfully')"
        python -c "from models import ResearchResult, CodeAnalysis, CreativeContent; print('✅ All models import successfully')"
        
    - name: Test basic functionality
      env:
        GEMINI_API_KEY: fake_key_for_testing
      run: |
        python -c "
        from models import MultiAgentContext
        context = MultiAgentContext()
        context.add_conversation('test', 'test message', 'test_agent')
        assert len(context.conversation_history) == 1
        print('✅ Context management works')
        "

  # =============================================================================
  # BUILD AND PUSH JOB
  # =============================================================================
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha,prefix={{branch}}-
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Update Docker Hub description
      uses: peter-evans/dockerhub-description@v3
      with:
        username: ${{ env.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
        repository: ${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}
        readme-filepath: ./README.md

  # =============================================================================
  # SECURITY SCANNING JOB
  # =============================================================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.REGISTRY }}/${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # =============================================================================
  # INTEGRATION TESTING JOB
  # =============================================================================
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build-and-push
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Test Docker image - Multi-Agent
      run: |
        echo "GEMINI_API_KEY=fake_key_for_testing" > .env
        docker run --rm --env-file .env \
          ${{ env.REGISTRY }}/${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest \
          python -c "
        print('🐳 Docker container started successfully')
        from models import MultiAgentContext
        print('✅ Models import successfully in container')
        context = MultiAgentContext() 
        print('✅ Context initialization works in container')
        print('🎉 Integration test passed!')
        "
        
    - name: Test Docker image - Simple Agent
      run: |
        docker run --rm --env-file .env \
          ${{ env.REGISTRY }}/${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest \
          python -c "
        print('🔍 Testing simple research agent container')
        import os
        from models import ResearchResult
        print('✅ Research models import successfully')
        print('🎉 Simple agent container test passed!')
        "
        
    - name: Test Docker Compose
      run: |
        docker-compose -f docker-compose.yml config
        echo "✅ Docker Compose configuration is valid"

  # =============================================================================
  # DEPLOYMENT JOB (for tagged releases)
  # =============================================================================
  deploy:
    name: Deploy Release
    runs-on: ubuntu-latest
    needs: [test, build-and-push, integration-test]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Multi-Agent AI System ${{ github.ref }}
        body: |
          ## 🚀 Multi-Agent AI System Release
          
          ### 📦 Docker Images
          - `dhiraj918106/multi-agent-ai:${{ github.ref_name }}`
          - `dhiraj918106/multi-agent-ai:latest`
          
          ### 🐳 Quick Start
          ```bash
          # Pull the latest image
          docker pull dhiraj918106/multi-agent-ai:${{ github.ref_name }}
          
          # Run multi-agent system
          docker run -it --env-file .env dhiraj918106/multi-agent-ai:${{ github.ref_name }} python multi_agent.py
          
          # Run simple research agent  
          docker run -it --env-file .env dhiraj918106/multi-agent-ai:${{ github.ref_name }} python main.py
          ```
          
          ### ✨ Features
          - 🔍 Research Agent for comprehensive topic analysis
          - 💻 Code Agent for code review and security analysis
          - ✍️ Creative Agent for content creation
          - 🎭 Coordinator Agent for multi-agent orchestration
          - 🐳 Docker support with multi-platform builds
          
          ### 📋 Requirements
          - Docker installed
          - Valid Gemini API key
          
          See README.md for detailed installation and usage instructions.
        draft: false
        prerelease: false

  # =============================================================================
  # NOTIFICATION JOB
  # =============================================================================
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [test, build-and-push, integration-test]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.test.result == 'success' && needs.build-and-push.result == 'success' && needs.integration-test.result == 'success' }}
      run: |
        echo "🎉 CI/CD Pipeline completed successfully!"
        echo "✅ Tests passed"
        echo "✅ Docker images built and pushed"
        echo "✅ Integration tests passed"
        echo "🐳 Images available at: docker pull dhiraj918106/multi-agent-ai:latest"
        
    - name: Notify on failure
      if: ${{ needs.test.result == 'failure' || needs.build-and-push.result == 'failure' || needs.integration-test.result == 'failure' }}
      run: |
        echo "❌ CI/CD Pipeline failed!"
        echo "🔍 Check the failed jobs for details"
        exit 1